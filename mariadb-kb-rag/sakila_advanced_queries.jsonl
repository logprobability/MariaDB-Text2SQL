{"description": "Top 3 Films by Rental Revenue per Category using CTE and Window Functions", "query": "WITH revenue_by_film AS (\n    SELECT \n        c.name AS category,\n        f.film_id,\n        f.title,\n        SUM(p.amount) AS total_revenue,\n        RANK() OVER (PARTITION BY c.category_id ORDER BY SUM(p.amount) DESC) AS rank_in_category\n    FROM payment p\n    JOIN rental r ON p.rental_id = r.rental_id\n    JOIN inventory i ON r.inventory_id = i.inventory_id\n    JOIN film f ON i.film_id = f.film_id\n    JOIN film_category fc ON f.film_id = fc.film_id\n    JOIN category c ON fc.category_id = c.category_id\n    GROUP BY c.category_id, f.film_id\n)\nSELECT *\nFROM revenue_by_film\nWHERE rank_in_category <= 3;"}
{"description": "Cumulative Revenue per Customer Over Time using Window Function", "query": "SELECT \n    c.customer_id,\n    c.first_name,\n    c.last_name,\n    DATE(p.payment_date) AS payment_date,\n    p.amount,\n    SUM(p.amount) OVER (PARTITION BY c.customer_id ORDER BY p.payment_date) AS running_total\nFROM payment p\nJOIN customer c ON p.customer_id = c.customer_id\nORDER BY c.customer_id, p.payment_date;"}
{"description": "Recursive CTE to Generate Date Range and Match Rentals Per Day", "query": "WITH RECURSIVE date_range AS (\n    SELECT DATE('2005-05-24') AS rental_date\n    UNION ALL\n    SELECT rental_date + INTERVAL 1 DAY\n    FROM date_range\n    WHERE rental_date + INTERVAL 1 DAY <= '2005-06-30'\n)\nSELECT \n    d.rental_date,\n    COUNT(r.rental_id) AS rentals\nFROM date_range d\nLEFT JOIN rental r ON DATE(r.rental_date) = d.rental_date\nGROUP BY d.rental_date\nORDER BY d.rental_date;"}
{"description": "Simulate a JSON Aggregate to Get List of Actors per Film", "query": "SELECT \n    f.film_id,\n    f.title,\n    JSON_ARRAYAGG(JSON_OBJECT('actor_id', a.actor_id, 'name', CONCAT(a.first_name, ' ', a.last_name))) AS actors\nFROM film f\nJOIN film_actor fa ON f.film_id = fa.film_id\nJOIN actor a ON fa.actor_id = a.actor_id\nGROUP BY f.film_id, f.title;"}
{"description": "Dynamic SQL to Filter Films by Category Name", "query": "SET @category = 'Action';\nSET @stmt = CONCAT('\n    SELECT f.title, c.name AS category\n    FROM film f\n    JOIN film_category fc ON f.film_id = fc.film_id\n    JOIN category c ON fc.category_id = c.category_id\n    WHERE c.name = \"', @category, '\"'\n);\n\nPREPARE dyn_stmt FROM @stmt;\nEXECUTE dyn_stmt;\nDEALLOCATE PREPARE dyn_stmt;"}
{"description": "Stored Function to Calculate Total Rental Revenue for a Film", "query": "DELIMITER $$\n\nCREATE FUNCTION total_film_revenue(filmId INT) \nRETURNS DECIMAL(10,2)\nDETERMINISTIC\nBEGIN\n    DECLARE revenue DECIMAL(10,2);\n    SELECT SUM(p.amount)\n    INTO revenue\n    FROM payment p\n    JOIN rental r ON p.rental_id = r.rental_id\n    JOIN inventory i ON r.inventory_id = i.inventory_id\n    WHERE i.film_id = filmId;\n    RETURN IFNULL(revenue, 0);\nEND$$\n\nDELIMITER ;\n\n-- Usage\nSELECT title, total_film_revenue(f.film_id) AS revenue\nFROM film f\nORDER BY revenue DESC\nLIMIT 10;"}
