{"description": "Display the first and last names of all actors from the table actor.", "query": "SELECT first_name, last_name FROM actor;"}
{"description": "Display the first and last name of each actor in a single column in upper case letters. Name the column Actor Name.", "query": "SELECT UPPER(CONCAT(first_name,' ',last_name)) AS 'Actor Name' FROM actor;"}
{"description": "Find the ID number, first name, and last name of an actor with the first name 'Joe'.", "query": "SELECT actor_id, first_name, last_name FROM actor WHERE first_name LIKE 'Joe';"}
{"description": "Find all actors whose last name contains the letters GEN.", "query": "SELECT first_name, last_name FROM actor WHERE last_name LIKE '%GEN%';"}
{"description": "Find all actors whose last names contain the letters LI, ordered by last and first name.", "query": "SELECT first_name, last_name FROM actor WHERE last_name LIKE '%LI%' ORDER BY last_name, first_name;"}
{"description": "Display the country_id and country for Afghanistan, Bangladesh, and China using IN.", "query": "SELECT country_id, country FROM country WHERE country IN ('Afghanistan', 'Bangladesh', 'China');"}
{"description": "Add a middle_name column to the actor table between first_name and last_name.", "query": "ALTER TABLE actor ADD COLUMN middle_name VARCHAR(30) AFTER first_name;"}
{"description": "Change the data type of the middle_name column to BLOB.", "query": "ALTER TABLE actor MODIFY COLUMN middle_name BLOB;"}
{"description": "Delete the middle_name column.", "query": "ALTER TABLE actor DROP COLUMN middle_name;"}
{"description": "List last names of actors and count how many actors have each last name.", "query": "SELECT last_name AS 'Last Name', COUNT(last_name) AS 'Last Name Count' FROM actor GROUP BY last_name;"}
{"description": "List last names with counts, but only for names that are shared by at least two actors.", "query": "SELECT last_name AS 'Last Name', COUNT(last_name) AS 'Last Name Count' FROM actor GROUP BY last_name HAVING COUNT(last_name) > 1;"}
{"description": "Fix HARPO WILLIAMS mistakenly entered as GROUCHO WILLIAMS.", "query": "UPDATE actor SET first_name = 'HARPO' WHERE first_name = 'Groucho' AND last_name = 'Williams';"}
{"description": "Conditionally update HARPO to GROUCHO or GROUCHO to MUCHO GROUCHO.", "query": "UPDATE actor SET first_name = CASE WHEN first_name = 'Harpo' THEN 'GROUCHO' WHEN first_name = 'Groucho' THEN 'MUCHO GROUCHO' ELSE first_name END;"}
{"description": "Re-create the schema of the address table.", "query": "CREATE TABLE address_new (address_id INTEGER(11) NOT NULL, address VARCHAR(30) NOT NULL, adress2 VARCHAR(30) NOT NULL, district VARCHAR(30) NOT NULL, city_id INTEGER(11) NOT NULL, postal_code INTEGER(11) NOT NULL, phone INTEGER(10) NOT NULL, location VARCHAR(30) NOT NULL, last_update DATETIME);"}
{"description": "Use JOIN to display names and addresses of staff members.", "query": "SELECT s.first_name AS 'First Name', s.last_name AS 'Last Name', a.address AS 'Address' FROM staff AS s JOIN address AS a ON a.address_id = s.address_id;"}
{"description": "Use JOIN to display total amount rung up by each staff member in August 2005.", "query": "SELECT CONCAT(s.first_name,' ',s.last_name) AS 'Staff Member', SUM(p.amount) AS 'Total Amount' FROM payment AS p JOIN staff AS s ON p.staff_id = s.staff_id WHERE payment_date LIKE '2005-08%' GROUP BY p.staff_id;"}
{"description": "List each film and number of actors listed for that film.", "query": "SELECT f.title AS 'Film', COUNT(fa.actor_id) AS 'Number of Actors' FROM film AS f JOIN film_actor AS fa ON f.film_id = fa.film_id GROUP BY f.title;"}
{"description": "Count how many copies of Hunchback Impossible exist.", "query": "SELECT f.title AS Film, COUNT(i.inventory_id) AS 'Inventory Count' FROM film AS f JOIN inventory AS i ON f.film_id = i.film_id WHERE f.title = 'Hunchback Impossible' GROUP BY f.film_id;"}
{"description": "List the total paid by each customer, sorted alphabetically by last name.", "query": "SELECT CONCAT(c.first_name,' ',c.last_name) AS 'Customer Name', SUM(p.amount) AS 'Total Paid' FROM payment AS p JOIN customer AS c ON p.customer_id = c.customer_id GROUP BY p.customer_id;"}
{"description": "Display titles of English-language movies starting with K or Q using subqueries.", "query": "SELECT f.title FROM film AS f JOIN language AS l ON f.language_id = l.language_id WHERE (f.title LIKE 'K%' OR f.title LIKE 'Q%') AND l.name = 'English';"}
{"description": "Display all actors in the film Alone Trip.", "query": "SELECT CONCAT(first_name,' ',last_name) AS 'Actors in Alone Trip' FROM actor WHERE actor_id IN (SELECT actor_id FROM film_actor WHERE film_id = (SELECT film_id FROM film WHERE title = 'Alone Trip'));"}
{"description": "List names and emails of Canadian customers for email marketing.", "query": "SELECT CONCAT(c.first_name,' ',c.last_name) AS 'Name', c.email AS 'E-mail' FROM customer AS c JOIN address AS a ON c.address_id = a.address_id JOIN city AS cy ON a.city_id = cy.city_id JOIN country AS ct ON ct.country_id = cy.country_id WHERE ct.country = 'Canada';"}
{"description": "Identify all movies categorized as Family films.", "query": "SELECT f.title AS 'Movie Title' FROM film AS f JOIN film_category AS fc ON fc.film_id = f.film_id JOIN category AS c ON c.category_id = fc.category_id WHERE c.name = 'Family';"}
{"description": "Display most frequently rented movies in descending order.", "query": "SELECT f.title AS 'Movie', COUNT(r.rental_date) AS 'Times Rented' FROM film AS f JOIN inventory AS i ON i.film_id = f.film_id JOIN rental AS r ON r.inventory_id = i.inventory_id GROUP BY f.title ORDER BY COUNT(r.rental_date) DESC;"}
{"description": "Display how much business each store brought in.", "query": "SELECT CONCAT(c.city, ', ', cy.country) AS 'Store', s.store_id AS 'Store ID', SUM(p.amount) AS 'Total Sales' FROM payment AS p JOIN rental AS r ON r.rental_id = p.rental_id JOIN inventory AS i ON i.inventory_id = r.inventory_id JOIN store AS s ON s.store_id = i.store_id JOIN address AS a ON a.address_id = s.address_id JOIN city AS c ON c.city_id = a.city_id JOIN country AS cy ON cy.country_id = c.country_id GROUP BY s.store_id;"}
{"description": "Display for each store its store ID, city, and country.", "query": "SELECT s.store_id AS 'Store ID', c.city AS 'City', cy.country AS 'Country' FROM store AS s JOIN address AS a ON a.address_id = s.address_id JOIN city AS c ON c.city_id = a.city_id JOIN country AS cy ON cy.country_id = c.country_id ORDER BY s.store_id;"}
{"description": "List top five genres in gross revenue in descending order.", "query": "SELECT c.name AS 'Film', SUM(p.amount) AS 'Gross Revenue' FROM category AS c JOIN film_category AS fc ON fc.category_id = c.category_id JOIN inventory AS i ON i.film_id = fc.film_id JOIN rental AS r ON r.inventory_id = i.inventory_id JOIN payment AS p ON p.rental_id = r.rental_id GROUP BY c.name ORDER BY SUM(p.amount) DESC LIMIT 5;"}
{"description": "Create a view for the top five genres by gross revenue.", "query": "CREATE VIEW top_5_genre_revenue AS SELECT c.name AS 'Film', SUM(p.amount) AS 'Gross Revenue' FROM category AS c JOIN film_category AS fc ON fc.category_id = c.category_id JOIN inventory AS i ON i.film_id = fc.film_id JOIN rental AS r ON r.inventory_id = i.inventory_id JOIN payment AS p ON p.rental_id = r.rental_id GROUP BY c.name ORDER BY SUM(p.amount) DESC LIMIT 5;"}
{"description": "Display the view created in 8a.", "query": "SELECT * FROM top_5_genre_revenue;"}
{"description": "Delete the view top_5_genre_revenue.", "query": "DROP VIEW top_5_genre_revenue;"}